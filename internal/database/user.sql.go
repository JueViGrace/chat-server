// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
;

INSERT INTO user (
    id,
    firstname,
    lastname,
    username,
    alias,
    email,
    password,
    phone_number,
    birth_date,
    role
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	ID          string
	Firstname   string
	Lastname    string
	Username    string
	Alias       sql.NullString
	Email       string
	Password    string
	PhoneNumber string
	BirthDate   string
	Role        int64
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Firstname,
		arg.Lastname,
		arg.Username,
		arg.Alias,
		arg.Email,
		arg.Password,
		arg.PhoneNumber,
		arg.BirthDate,
		arg.Role,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE user SET 
    deleted_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getEmail = `-- name: GetEmail :one
;

select email
from user
where user.email = ?
`

func (q *Queries) GetEmail(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRowContext(ctx, getEmail, email)
	err := row.Scan(&email)
	return email, err
}

const getPhoneNumber = `-- name: GetPhoneNumber :one
;

select phone_number
from user
where user.phone_number = ?
`

func (q *Queries) GetPhoneNumber(ctx context.Context, phoneNumber string) (string, error) {
	row := q.db.QueryRowContext(ctx, getPhoneNumber, phoneNumber)
	var phone_number string
	err := row.Scan(&phone_number)
	return phone_number, err
}

const getUser = `-- name: GetUser :one
;

select id, firstname, lastname, username, alias, email, password, phone_number, birth_date, role, created_at, updated_at, deleted_at
from user
where user.email = ? or user.username = ?
`

type GetUserParams struct {
	Email    string
	Username string
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, arg.Email, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Username,
		&i.Alias,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.BirthDate,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
select id, firstname, lastname, username, alias, email, password, phone_number, birth_date, role, created_at, updated_at, deleted_at
from user
where user.id = ?
`

func (q *Queries) GetUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Username,
		&i.Alias,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.BirthDate,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUsername = `-- name: GetUsername :one
;

select username
from user
where user.username = ?
`

func (q *Queries) GetUsername(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUsername, username)
	err := row.Scan(&username)
	return username, err
}

const updateEmail = `-- name: UpdateEmail :exec
UPDATE user SET
    email = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateEmailParams struct {
	Email string
	ID    string
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateEmail, arg.Email, arg.ID)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE user SET
    password = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdatePasswordParams struct {
	Password string
	ID       string
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.Password, arg.ID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE user SET
    firstname = ?,
    lastname = ?,
    alias = ?,
    birth_date = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateUserParams struct {
	Firstname string
	Lastname  string
	Alias     sql.NullString
	BirthDate string
	ID        string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Firstname,
		arg.Lastname,
		arg.Alias,
		arg.BirthDate,
		arg.ID,
	)
	return err
}

const updateUsername = `-- name: UpdateUsername :exec
UPDATE user SET
    username = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateUsernameParams struct {
	Username string
	ID       string
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) error {
	_, err := q.db.ExecContext(ctx, updateUsername, arg.Username, arg.ID)
	return err
}
